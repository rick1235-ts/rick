<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>üçø CINEBLACK</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <style>
        /* Ajuste para o padding do container principal */
        .p-6 {
            padding: 1.5rem;
        }
        @media (min-width: 768px) {
            .p-6 {
                padding: 2rem;
            }
        }
        /* Estilos para o overlay do modal de detalhes */
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.8);
        }
        /* Estilo para o elemento de carregamento */
        .loading-indicator {
            text-align: center;
            padding: 20px;
            color: #ccc;
        }
    </style>
</head>
<body class="bg-black text-white font-sans min-h-screen flex flex-col">
    <header class="text-center py-6 bg-gradient-to-r from-blue-700 to-red-500 flex justify-between items-center px-4">
        <h1 class="text-3xl font-bold">üçø CINEBLACK</h1>
        <nav>
            <button id="showMoviesBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md mx-2 transition-colors">Filmes</button>
            <button id="showSeriesBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md mx-2 transition-colors">S√©ries</button>
        </nav>
    </header>

    <div class="p-6 max-w-7xl mx-auto flex-1 w-full">
        <div class="flex flex-col md:flex-row gap-4 mb-6 justify-center items-center">
            <input type="text" id="searchInput" placeholder="Pesquisar..." class="p-3 rounded bg-gray-800 text-white placeholder-gray-400 border border-gray-600 w-full md:w-80" />
            <select id="categorySelect" class="p-3 rounded bg-gray-800 text-white border border-gray-600 w-full md:w-60">
                <option value="">Todas as Categorias</option>
            </select>
            <button id="baixarListaBtn" class="relative bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded flex items-center justify-center transition-colors">
                <span id="loadSpinner" class="absolute left-3 w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin hidden"></span>
                üì• CARREGAR LISTA DE CONTEUDO
            </button>
            <button id="limparListaBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-0.5 py-0.5 rounded transition-colors">
                üîÑ ATUALIZAR LISTA
            </button>
        </div>

        <div id="playerContainer" class="relative mb-10 hidden">
            <video id="player" controls muted class="w-full max-w-4xl mx-auto block rounded-lg shadow-2xl"></video>
            <div class="mt-2 flex justify-center gap-4">
                <button id="prevEpisodeBtn" class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded transition-colors">Anterior</button>
                <button id="nextEpisodeBtn" class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded transition-colors">Pr√≥ximo</button>
            </div>
            <button id="closePlayer" class="absolute top-2 right-2 bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded-full text-lg transition-colors">‚úñ</button>
        </div>

        <div id="moviesSection">
            <h2 class="text-3xl md:text-4xl font-extrabold mb-8 text-center uppercase tracking-wide text-pink-500">
                üé¨ Filmes Dispon√≠veis
            </h2>
            <div id="moviesGrid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                <div class="text-center text-gray-400 py-10 col-span-full initial-load-message">
                    Carregando conte√∫do... por favor, aguarde.
                </div>
            </div>
            <div id="moviesLoading" class="loading-indicator hidden">Carregando mais filmes...</div>
        </div>

        <div id="seriesSection" class="hidden">
            <h2 class="text-3xl md:text-4xl font-extrabold mb-8 text-center uppercase tracking-wide text-pink-500 mt-10">
                üì∫ S√©ries Dispon√≠veis
            </h2>
            <div id="seriesGrid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                <div class="text-center text-gray-400 py-10 col-span-full initial-load-message">
                    Carregando conte√∫do... por favor, aguarde.
                </div>
            </div>
            <div id="seriesLoading" class="loading-indicator hidden">Carregando mais s√©ries...</div>
        </div>
    </div>

    <div id="episodesModal" class="fixed inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-50">
        <div class="bg-gray-900 rounded-xl p-6 max-w-lg w-full relative">
            <button id="closeModal" class="absolute top-3 right-3 text-white text-2xl font-bold">&times;</button>
            <h3 id="modalTitle" class="text-xl font-bold mb-4">Epis√≥dios</h3>
            <div id="episodesList" class="space-y-2 max-h-96 overflow-y-auto"></div>
        </div>
    </div>

    <div id="detailsModal" class="fixed inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-50 modal-overlay">
        <div class="bg-gray-900 rounded-xl p-6 max-w-2xl w-full relative mx-4 max-h-[90vh] overflow-y-auto">
            <button id="closeDetailsModal" class="absolute top-3 right-3 text-white text-2xl font-bold">&times;</button>
            <div class="flex flex-col md:flex-row gap-6">
                <img id="detailPoster" src="https://dummyimage.com/200x300/444/fff.png&text=Carregando..." alt="P√¥ster" class="w-full md:w-1/3 rounded-lg object-cover flex-shrink-0" onerror="this.src='https://dummyimage.com/200x300/444/fff.png&text=Sem+P√¥ster'"/>
                <div class="flex-1">
                    <h3 id="detailTitle" class="text-3xl font-bold mb-2">Carregando...</h3>
                    <p id="detailYearGenre" class="text-gray-400 text-sm mb-3">Ano | G√™nero</p>
                    <p id="detailPlot" class="text-gray-300 text-base mb-4">Carregando sinopse...</p>
                    <p id="detailActors" class="text-gray-400 text-sm mb-2"><strong>Elenco:</strong> Carregando...</p>
                    <p id="detailRating" class="text-gray-400 text-sm mb-4"><strong>Avalia√ß√£o IMDb:</strong> Carregando...</p>
                    <button id="playMovieButton" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg text-lg font-semibold w-full transition-colors flex items-center justify-center">
                        ‚ñ∂Ô∏è Assistir
                    </button>
                </div>
            </div>
        </div>
    </div>

    <footer class="text-center text-gray-400 p-4 text-sm mt-auto">
        ¬© 2025 - UMA IDEIA QUE NASCEU NOS CORREDORES DO IFBA
    </footer>

    <script>
        // --- CHAVE DA OMDb API ---
        // Certifique-se de que esta chave est√° ativada no site da OMDb API!
        const OMDb_API_KEY = 'bfd88c5c';
        // --- FIM DA CHAVE ---

        const searchInput = document.getElementById('searchInput');
        const categorySelect = document.getElementById('categorySelect');
        const baixarBtn = document.getElementById('baixarListaBtn');
        const loadSpinner = document.getElementById('loadSpinner');
        const playerContainer = document.getElementById('playerContainer');
        const player = document.getElementById('player');
        const closePlayer = document.getElementById('closePlayer');
        const prevEpisodeBtn = document.getElementById('prevEpisodeBtn');
        const nextEpisodeBtn = document.getElementById('nextEpisodeBtn');
        const episodesModal = document.getElementById('episodesModal');
        const closeModal = document.getElementById('closeModal');
        const modalTitle = document.getElementById('modalTitle');
        const episodesList = document.getElementById('episodesList');
        const limparListaBtn = document.getElementById('limparListaBtn');

        // Elementos para se√ß√µes
        const moviesSection = document.getElementById('moviesSection');
        const seriesSection = document.getElementById('seriesSection');
        const showMoviesBtn = document.getElementById('showMoviesBtn');
        const showSeriesBtn = document.getElementById('showSeriesBtn');
        const moviesGrid = document.getElementById('moviesGrid');
        const seriesGrid = document.getElementById('seriesGrid');

        // NOVO: Elementos do Modal de Detalhes
        const detailsModal = document.getElementById('detailsModal');
        const closeDetailsModal = document.getElementById('closeDetailsModal');
        const detailPoster = document.getElementById('detailPoster');
        const detailTitle = document.getElementById('detailTitle');
        const detailYearGenre = document.getElementById('detailYearGenre');
        const detailPlot = document.getElementById('detailPlot');
        const detailActors = document.getElementById('detailActors');
        const detailRating = document.getElementById('detailRating');
        const playMovieButton = document.getElementById('playMovieButton');

        // Elementos para o carregamento cont√≠nuo
        const moviesLoadingIndicator = document.getElementById('moviesLoading');
        const seriesLoadingIndicator = document.getElementById('seriesLoading');

        let allItems = [];
        let groupedMovies = []; // Armazena todos os filmes agrupados
        let groupedSeries = {}; // Armazena todas as s√©ries agrupadas

        let currentActiveSection = 'movies'; // 'movies' ou 'series'

        // Vari√°veis para controlar o carregamento incremental
        const ITEMS_PER_LOAD = 24; // Quantos itens carregar por vez (m√∫ltiplo do grid para n√£o quebrar o layout)
        let moviesStartIndex = 0;
        let seriesStartIndex = 0;
        let moviesFullyLoaded = false;
        let seriesFullyLoaded = false;

        let hlsInstance = null;

        let currentSeriesName = null;
        let currentSeriesEps = [];
        let currentEpIndex = null;
        let currentPlayItem = null;

        const dbName = 'RykelmyFilmesDB';
        const dbVersion = 2;
        const storeName = 'm3uStore';

        // --- Fun√ß√µes de IndexedDB ---
        function openDB() {
            return new Promise((resolve, reject) => {
                const request = indexedDB.open(dbName, dbVersion);
                request.onerror = (event) => {
                    console.error("Erro IndexedDB ao abrir:", event.target.error);
                    reject(event.target.error);
                };
                request.onupgradeneeded = (event) => {
                    const db = event.target.result;
                    if (!db.objectStoreNames.contains(storeName)) {
                        db.createObjectStore(storeName);
                    }
                };
                request.onsuccess = (event) => resolve(event.target.result);
            });
        }

        async function saveToDB(key, data) {
            const db = await openDB();
            const tx = db.transaction(storeName, 'readwrite');
            tx.objectStore(storeName).put(data, key);
            return tx.complete;
        }

        async function getFromDB(key) {
            const db = await openDB();
            return new Promise((resolve, reject) => {
                const tx = db.transaction(storeName, 'readonly');
                const store = tx.objectStore(storeName);
                const request = store.get(key);
                request.onsuccess = (event) => resolve(event.target.result || '');
                request.onerror = (event) => reject(event.target.error);
            });
        }

        async function clearDB() {
            const db = await openDB();
            const tx = db.transaction(storeName, 'readwrite');
            tx.objectStore(storeName).clear();
            return tx.complete;
        }

        // --- Fun√ß√µes de Parsing e Agrupamento ---
        function parseM3U(text) {
            const lines = text.split(/\r?\n/);
            const items = [];
            const vodExt = /\.(mp4|mkv|mov|avi|webm|m3u8)$/i;

            for (let i = 0; i < lines.length; i++) {
                if (lines[i].startsWith('#EXTINF')) {
                    const title = (lines[i].match(/,(.*)/) || [])[1]?.trim();
                    const thumb = (lines[i].match(/tvg-logo="(.*?)"/) || [])[1] || 'https://dummyimage.com/300x169/444/fff.png&text=Sem+Imagem';
                    const group = (lines[i].match(/group-title="(.*?)"/) || [])[1] || '';
                    const url = lines[i+1]?.trim();
                    if (url && url.startsWith('http') && group.toLowerCase() !== 'ao vivo' && vodExt.test(url)) {
                        items.push({ title, url, thumb, group });
                    }
                }
            }
            return items;
        }

        function groupItems(items) {
            const series = {};
            const movies = [];
            items.forEach(item => {
                const match = item.title.match(/^(.*?)[\s\.-]?[sS](\d+)[eE](\d+)/);
                if (match) {
                    const name = match[1].trim();
                    series[name] = series[name] || [];
                    series[name].push(item);
                } else {
                    movies.push(item);
                }
            });

            for (const name in series) {
                series[name].sort((a, b) => {
                    const aMatch = a.title.match(/[sS](\d+)[eE](\d+)/);
                    const bMatch = b.title.match(/[sS](\d+)[eE](\d+)/);
                    if (!aMatch || !bMatch) return 0;
                    const sA = parseInt(aMatch[1]);
                    const eA = parseInt(aMatch[2]);
                    const sB = parseInt(bMatch[1]);
                    const eB = parseInt(bMatch[2]);

                    if (sA !== sB) return sA - sB;
                    return eA - eB;
                });
            }
            return { series, movies };
        }

        // --- FUN√á√ÉO PARA BUSCAR DETALHES DA API OMDb ---
        async function fetchDetailsFromOMDb(title, type = 'movie') {
            if (!OMDb_API_KEY || OMDb_API_KEY === 'SUA_CHAVE_AQUI') { // A chave agora est√° definida acima
                console.warn("Chave da OMDb API n√£o configurada corretamente.");
                return null;
            }
            let yearMatch = title.match(/\((\d{4})\)/);
            let year = yearMatch ? yearMatch[1] : '';

            let cleanedTitle = title.replace(/[\s\.-]?[sS]\d+[eE]\d+/, '').replace(/\(\d{4}\)/, '').trim();

            const url = `https://www.omdbapi.com/?apikey=${OMDb_API_KEY}&t=${encodeURIComponent(cleanedTitle)}&type=${type}&y=${year}&plot=full&r=json`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.Response === "True") {
                    return {
                        title: data.Title,
                        year: data.Year,
                        genre: data.Genre,
                        plot: data.Plot !== "N/A" ? data.Plot : "Sinopse n√£o dispon√≠vel.",
                        poster: data.Poster !== "N/A" ? data.Poster : 'https://dummyimage.com/200x300/444/fff.png&text=Sem+P√¥ster',
                        actors: data.Actors !== "N/A" ? data.Actors : "Informa√ß√£o n√£o dispon√≠vel.",
                        imdbRating: data.imdbRating !== "N/A" ? data.imdbRating : "N/A",
                    };
                } else {
                    console.warn(`Detalhes para "${title}" n√£o encontrados na OMDb: ${data.Error}`);
                    return null;
                }
            } catch (error) {
                console.error("Erro ao buscar detalhes na OMDb:", error);
                return null;
            }
        }

        // --- Fun√ß√µes de Renderiza√ß√£o e Carregamento Cont√≠nuo ---

        // Fun√ß√£o para criar um card de m√≠dia (filme ou s√©rie)
        function createMediaCard(item, type) {
            const card = document.createElement('div');
            card.className = 'bg-gray-800 p-2 rounded-xl cursor-pointer hover:scale-105 transition duration-300 overflow-hidden';

            let titleText = item.title;
            let subText = '';
            let isLastWatched = false;

            if (type === 'movie') {
                isLastWatched = localStorage.getItem('last_film') === item.title;
            } else { // type === 'series'
                const seriesName = item.title.replace(/[\s\.-]?[sS]\d+[eE]\d+/, '').trim();
                subText = `${groupedSeries[seriesName]?.length || 0} epis√≥dios`; // Adicionado fallback para 0
                titleText = seriesName; // Exibe o nome da s√©rie limpo
            }

            card.innerHTML = `
                <img src="${item.thumb}" alt="${titleText}" class="aspect-video object-cover rounded-lg mb-2 w-full" onerror="this.src='https://dummyimage.com/300x169/444/fff.png&text=Sem+Imagem'"/>
                <h3 class="${type === 'movie' ? 'text-sm' : 'font-bold text-center'} truncate flex justify-between items-center">
                    <span>${titleText}</span> ${isLastWatched ? '<span class="text-red-500 text-xs ml-auto">üî¥ Visto</span>' : ''}
                </h3>
                ${subText ? `<p class="text-sm text-center text-gray-400">${subText}</p>` : ''}`;

            card.onclick = () => openDetailsModal(item, type);
            return card;
        }

        function loadMoreMovies() {
            if (moviesFullyLoaded) {
                moviesLoadingIndicator.classList.add('hidden');
                return;
            }

            moviesLoadingIndicator.classList.remove('hidden');
            const end = moviesStartIndex + ITEMS_PER_LOAD;
            const moviesBatch = groupedMovies.slice(moviesStartIndex, end);

            if (moviesBatch.length === 0) {
                moviesFullyLoaded = true;
                moviesLoadingIndicator.classList.add('hidden');
                return;
            }

            moviesBatch.forEach(item => {
                moviesGrid.appendChild(createMediaCard(item, 'movie'));
            });
            moviesStartIndex = end;

            if (moviesBatch.length < ITEMS_PER_LOAD) {
                moviesFullyLoaded = true;
                moviesLoadingIndicator.classList.add('hidden');
            }
        }

        function loadMoreSeries() {
            if (seriesFullyLoaded) {
                seriesLoadingIndicator.classList.add('hidden');
                return;
            }

            seriesLoadingIndicator.classList.remove('hidden');
            const seriesNames = Object.keys(groupedSeries);
            const end = seriesStartIndex + ITEMS_PER_LOAD;
            const seriesBatchNames = seriesNames.slice(seriesStartIndex, end);

            if (seriesBatchNames.length === 0) {
                seriesFullyLoaded = true;
                seriesLoadingIndicator.classList.add('hidden');
                return;
            }

            seriesBatchNames.forEach(name => {
                const item = groupedSeries[name][0]; // Usa o primeiro epis√≥dio para o card da s√©rie
                seriesGrid.appendChild(createMediaCard(item, 'series'));
            });
            seriesStartIndex = end;

            if (seriesBatchNames.length < ITEMS_PER_LOAD) {
                seriesFullyLoaded = true;
                seriesLoadingIndicator.classList.add('hidden');
            }
        }

        // Observer para detectar quando o usu√°rio chega ao final da lista
        const movieObserver = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && currentActiveSection === 'movies' && !moviesFullyLoaded) {
                loadMoreMovies();
            }
        }, { threshold: 0.1 });

        const seriesObserver = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && currentActiveSection === 'series' && !seriesFullyLoaded) {
                loadMoreSeries();
            }
        }, { threshold: 0.1 });

        function resetAndLoadInitialContent() {
            // Remove a mensagem inicial de carregamento se existir
            const initialLoadMessages = document.querySelectorAll('.initial-load-message');
            initialLoadMessages.forEach(msg => msg.remove());

            // Limpa as grades
            moviesGrid.innerHTML = '';
            seriesGrid.innerHTML = '';

            // Reinicia os √≠ndices e flags de carregamento
            moviesStartIndex = 0;
            seriesStartIndex = 0;
            moviesFullyLoaded = false;
            seriesFullyLoaded = false;

            // Desconecta observadores antes de reconect√°-los para evitar m√∫ltiplos observers
            movieObserver.disconnect();
            seriesObserver.disconnect();

            // Atacha os observadores aos elementos de carregamento
            movieObserver.observe(moviesLoadingIndicator);
            seriesObserver.observe(seriesLoadingIndicator);

            // Carrega o primeiro lote de itens para a se√ß√£o ativa
            if (currentActiveSection === 'movies') {
                loadMoreMovies();
            } else {
                loadMoreSeries();
            }
        }

        // --- Fun√ß√µes de Filtragem e Categoria ---
        function filterItems() {
            const q = searchInput.value.toLowerCase();
            const cat = categorySelect.value;

            let tempFilteredItems = allItems.filter(i =>
                i.title.toLowerCase().includes(q) &&
                (!cat || i.group === cat)
            );

            const { series, movies } = groupItems(tempFilteredItems);
            groupedMovies = movies;
            groupedSeries = series;

            resetAndLoadInitialContent();
        }

        function updateCategories() {
            const cats = [...new Set(allItems.map(i => i.group).filter(Boolean))].sort();
            categorySelect.innerHTML = '<option value="">Todas as Categorias</option>';
            cats.forEach(c => {
                const o = document.createElement('option');
                o.value = c;
                o.textContent = c;
                categorySelect.appendChild(o);
            });
        }

        // --- Fun√ß√µes de Player de V√≠deo e Modal de Epis√≥dios ---
        function openSeries(name, eps) {
            currentSeriesName = name;
            currentSeriesEps = eps;
            modalTitle.textContent = name;
            episodesList.innerHTML = '';
            const last = localStorage.getItem(`last_${name}`);
            eps.forEach((ep, idx) => {
                const btn = document.createElement('button');
                btn.className = 'w-full text-left p-2 bg-gray-700 rounded hover:bg-gray-600 flex justify-between items-center transition-colors';
                btn.innerHTML = `<span>${ep.title}</span>${ep.title===last?'<span class="text-red-500 text-xs ml-2">üî¥ Visto</span>':''}`;
                btn.onclick = () => playEpisode(idx);
                episodesList.appendChild(btn);
            });
            episodesModal.classList.remove('hidden');
            episodesModal.classList.add('flex');
        }

        function playEpisode(idx) {
            currentEpIndex = idx;
            const ep = currentSeriesEps[idx];
            localStorage.setItem(`last_${currentSeriesName}`, ep.title);
            openVideoLink(ep);
            episodesModal.classList.add('hidden');
            episodesModal.classList.remove('flex');
        }

        let lastTimeSaved = 0;
        function onTimeUpdate(event) {
            const player = event.target;
            const savedTimeKey = `time_${player.dataset.currentItemTitle}`;
            if (Math.floor(player.currentTime) % 5 === 0 && Math.floor(player.currentTime) !== lastTimeSaved) {
                localStorage.setItem(savedTimeKey, player.currentTime);
                lastTimeSaved = Math.floor(player.currentTime);
            }
            if (player.ended) {
                localStorage.setItem(savedTimeKey, 0);
            }
        }

        function openVideoLink(item) {
            if (hlsInstance) { hlsInstance.destroy(); hlsInstance = null; }

            player.dataset.currentItemTitle = item.title;
            player.removeEventListener('timeupdate', onTimeUpdate);

            if (!currentSeriesName) {
                localStorage.setItem('last_film', item.title);
            }

            const savedTimeKey = `time_${item.title}`;
            const savedTime = parseFloat(localStorage.getItem(savedTimeKey)) || 0;

            if (/\.m3u8$/i.test(item.url) && Hls.isSupported()) {
                hlsInstance = new Hls();
                hlsInstance.loadSource(item.url);
                hlsInstance.attachMedia(player);
                hlsInstance.on(Hls.Events.MANIFEST_PARSED, () => {
                    if (savedTime > 0) {
                        player.currentTime = savedTime;
                    }
                    player.play().catch(() => {});
                });
            } else {
                player.src = item.url;
                player.addEventListener('loadedmetadata', function resume() {
                    if (savedTime > 0) {
                        player.currentTime = savedTime;
                    }
                    player.play().catch(() => {});
                    player.removeEventListener('loadedmetadata', resume);
                });
            }

            playerContainer.classList.remove('hidden');
            player.addEventListener('timeupdate', onTimeUpdate);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // --- Fun√ß√µes do Modal de Detalhes ---
        async function openDetailsModal(item, type) {
            currentPlayItem = item;
            detailsModal.classList.remove('hidden');
            detailsModal.classList.add('flex');

            detailPoster.src = 'https://dummyimage.com/200x300/444/fff.png&text=Carregando...';
            detailTitle.textContent = 'Carregando...';
            detailYearGenre.textContent = 'Ano | G√™nero';
            detailPlot.textContent = 'Carregando sinopse...';
            detailActors.textContent = 'Elenco: Carregando...';
            detailRating.textContent = 'Avalia√ß√£o IMDb: Carregando...';
            playMovieButton.textContent = type === 'movie' ? '‚ñ∂Ô∏è Assistir Filme' : '‚ñ∂Ô∏è Ver Epis√≥dios';

            if (type === 'series') {
                playMovieButton.onclick = () => {
                    closeDetailsModal.click();
                    const seriesName = item.title.replace(/[\s\.-]?[sS]\d+[eE]\d+/, '').trim();
                    const seriesData = groupedSeries[seriesName];
                    if (seriesData) {
                        openSeries(seriesName, seriesData);
                    } else {
                        alert("S√©rie n√£o encontrada para exibir epis√≥dios.");
                    }
                };
            } else {
                playMovieButton.onclick = () => {
                    closeDetailsModal.click();
                    openVideoLink(item);
                };
            }

            const details = await fetchDetailsFromOMDb(item.title, type === 'series' ? 'series' : 'movie');
            if (details) {
                detailPoster.src = details.poster;
                detailTitle.textContent = details.title;
                detailYearGenre.textContent = `${details.year} | ${details.genre}`;
                detailPlot.textContent = details.plot;
                detailActors.textContent = `Elenco: ${details.actors}`;
                detailRating.textContent = `Avalia√ß√£o IMDb: ${details.imdbRating}`;
            } else {
                detailPoster.src = item.thumb;
                detailTitle.textContent = item.title;
                detailYearGenre.textContent = 'Informa√ß√£o n√£o dispon√≠vel';
                detailPlot.textContent = 'N√£o foi poss√≠vel carregar a sinopse detalhada.';
                detailActors.textContent = 'Elenco: N/A';
                detailRating.textContent = 'Avalia√ß√£o IMDb: N/A';
            }
        }

        closeDetailsModal.onclick = () => {
            detailsModal.classList.add('hidden');
            detailsModal.classList.remove('flex');
            currentPlayItem = null;
        };

        // --- Event Listeners dos Bot√µes Principais e Filtros ---
        searchInput.oninput = filterItems;
        categorySelect.onchange = filterItems;

        // --- Fun√ß√µes de Carregamento da Lista ---
        async function loadList() {
            loadSpinner.classList.remove('hidden');
            baixarBtn.disabled = true;
            limparListaBtn.disabled = true;
            searchInput.disabled = true;
            categorySelect.disabled = true;

            // Remove a mensagem inicial de "clique para carregar"
            const initialLoadMessages = document.querySelectorAll('.initial-load-message');
            initialLoadMessages.forEach(msg => msg.remove());

            try {
                // URL da sua playlist M3U.
                // ATEN√á√ÉO: O `cors-anywhere` √© um PROXY P√öBLICO para testes locais
                // e n√£o √© recomendado para uso em PRODU√á√ÉO por quest√µes de desempenho e confiabilidade.
                // Para produ√ß√£o, o servidor da playlist (masteriptv.tech) precisaria configurar o CORS,
                // ou voc√™ precisaria de um backend que fa√ßa a requisi√ß√£o para ele.
                const playlistUrl = 'https://cors-anywhere.herokuapp.com/https://masteriptv.tech/get.php?username=393880589&password=335139230&type=m3u_plus&output=ts';

                const res = await fetch(playlistUrl);
                if (!res.ok) {
                    throw new Error(`Erro HTTP! Status: ${res.status} - ${res.statusText}`);
                }
                const text = await res.text();

                await saveToDB('m3u_data', text);
                allItems = parseM3U(text);
                const { series, movies } = groupItems(allItems);
                groupedMovies = movies;
                groupedSeries = series;

                updateCategories();
                filterItems();

                alert('Lista de conte√∫do carregada com sucesso!');

            } catch (e) {
                console.error("Erro detalhado ao carregar lista:", e);
                alert('Erro ao carregar lista: ' + e.message + '. Por favor, verifique sua conex√£o ou a URL da lista.');
                moviesGrid.innerHTML = '<div class="text-center text-red-400 py-10 col-span-full">Erro ao carregar conte√∫do. Tente novamente ou verifique sua conex√£o.</div>';
                seriesGrid.innerHTML = '<div class="text-center text-red-400 py-10 col-span-full">Erro ao carregar conte√∫do.</div>';
            } finally {
                loadSpinner.classList.add('hidden');
                baixarBtn.disabled = false;
                limparListaBtn.disabled = false;
                searchInput.disabled = false;
                categorySelect.disabled = false;
            }
        }

        baixarBtn.onclick = loadList;

        limparListaBtn.onclick = async () => {
            if (confirm('Tem certeza que deseja ATUALIZAR a lista? Isso apagar√° os dados salvos e recarregar√° a p√°gina.')) {
                await clearDB();
                location.reload();
            }
        };

        // --- L√≥gica de Navega√ß√£o de Se√ß√£o ---
        function showSection(sectionElement) {
            moviesLoadingIndicator.classList.add('hidden');
            seriesLoadingIndicator.classList.add('hidden');

            moviesSection.classList.add('hidden');
            seriesSection.classList.add('hidden');
            sectionElement.classList.remove('hidden');

            currentActiveSection = sectionElement === moviesSection ? 'movies' : 'series';
            resetAndLoadInitialContent();
        }

        showMoviesBtn.onclick = () => showSection(moviesSection);
        showSeriesBtn.onclick = () => showSection(seriesSection);

        // --- Inicializa√ß√£o ---
        // Tenta carregar os dados do IndexedDB ou da internet automaticamente.
        getFromDB('m3u_data').then(text => {
            if (text) {
                allItems = parseM3U(text);
                const { series, movies } = groupItems(allItems);
                groupedMovies = movies;
                groupedSeries = series;

                updateCategories();
                resetAndLoadInitialContent(); // Inicia o carregamento gradual dos dados do cache
            } else {
                // Se n√£o h√° dados no IndexedDB, inicia o carregamento da internet automaticamente
                moviesLoadingIndicator.classList.add('hidden'); // Esconde temporariamente at√© loadList ser chamada
                seriesLoadingIndicator.classList.add('hidden'); // Esconde temporariamente at√© loadList ser chamada
                loadList(); // CHAMA loadList() AUTOMATICAMENTE AQUI
            }
        }).catch(e => {
            console.error("Erro ao carregar dados salvos do IndexedDB:", e);
            alert("Erro ao carregar dados salvos. Por favor, tente limpar os dados do site no seu navegador e recarregue a p√°gina.");
            moviesGrid.innerHTML = '<div class="text-center text-red-400 py-10 col-span-full">Erro ao carregar dados.</div>';
            seriesGrid.innerHTML = '<div class="text-center text-red-400 py-10 col-span-full">Erro ao carregar dados.</div>';
            moviesLoadingIndicator.classList.add('hidden');
            seriesLoadingIndicator.classList.add('hidden');
        });

        // Garante que a se√ß√£o inicial seja a de filmes
        showSection(moviesSection);
    </script>
</body>
</html>
